[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/436632800",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-436632800",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 436632800,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjYzMjgwMA==",
    "user": {
      "login": "edkalina",
      "id": 28148525,
      "node_id": "MDQ6VXNlcjI4MTQ4NTI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/28148525?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/edkalina",
      "html_url": "https://github.com/edkalina",
      "followers_url": "https://api.github.com/users/edkalina/followers",
      "following_url": "https://api.github.com/users/edkalina/following{/other_user}",
      "gists_url": "https://api.github.com/users/edkalina/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/edkalina/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/edkalina/subscriptions",
      "organizations_url": "https://api.github.com/users/edkalina/orgs",
      "repos_url": "https://api.github.com/users/edkalina/repos",
      "events_url": "https://api.github.com/users/edkalina/events{/privacy}",
      "received_events_url": "https://api.github.com/users/edkalina/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T14:03:44Z",
    "updated_at": "2018-11-07T14:03:44Z",
    "author_association": "NONE",
    "body": "@gaearon thank you for your answer in reactjs/rfcs#83. I've look at sources of `useReducer`. But I can't understand how it is related to `useCallback`. What issues has \"mutation of ref during rendering\"? Can you explain me in brief?",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/436632800/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/436647120",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-436647120",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 436647120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNjY0NzEyMA==",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-07T14:47:32Z",
    "updated_at": "2018-11-07T14:47:32Z",
    "author_association": "MEMBER",
    "body": "> I've look at sources of useReducer. But I can't understand how it is related to useCallback\r\n\r\n`useCallback` lets you memoize the callback to avoid a different function being passed down every time. But you have to specify everything it depends on in the second array argument. If it's something from props or state, your callback might get invalidated too often.\r\n\r\n`useReducer` doesn't suffer from this issue. The `dispatch` function it gives you will stay the same between re-renders even if the reducer itself closes over props and state. This works because the reducer runs during the next render (and thus has natural ability to read props and state). It would be nice if `useCallback` could also do something like this but it's not clear how.\r\n\r\n>What issues has \"mutation of ref during rendering\"? Can you explain me in brief?\r\n\r\nIn concurrent mode (not yet released), it would \"remember\" the last rendered version, which isn't great if we render different work-in-progress priorities. So it's not \"async safe\".",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/436647120/reactions",
      "total_count": 12,
      "+1": 11,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/437619579",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-437619579",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 437619579,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzYxOTU3OQ==",
    "user": {
      "login": "strayiker",
      "id": 6754588,
      "node_id": "MDQ6VXNlcjY3NTQ1ODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6754588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/strayiker",
      "html_url": "https://github.com/strayiker",
      "followers_url": "https://api.github.com/users/strayiker/followers",
      "following_url": "https://api.github.com/users/strayiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/strayiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/strayiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/strayiker/subscriptions",
      "organizations_url": "https://api.github.com/users/strayiker/orgs",
      "repos_url": "https://api.github.com/users/strayiker/repos",
      "events_url": "https://api.github.com/users/strayiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/strayiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-10T20:38:30Z",
    "updated_at": "2018-11-14T09:19:20Z",
    "author_association": "NONE",
    "body": "Would be nice if second argument of `useCallback` was injected as dependencies to callback function.\r\n\r\n```javascript\r\n  function useCallback(cb, deps) => {\r\n    lastDeps = deps; // save current deps and cb deep in somewhere\r\n    lastCb = cb;\r\n\r\n    if (!cached) {\r\n      cached = (...args) => lastCb(...lastDeps)(...args); // memoize that forevere\r\n    }\r\n\r\n    return cached; // never invalidates\r\n  }\r\n\r\n  const myCallback = useCallback(\r\n    (state, props) => (a, b) => a + b + state + props,\r\n    [state, props]\r\n  );\r\n\r\n  myCallback(1, 2)\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/437619579/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/439826037",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-439826037",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 439826037,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTgyNjAzNw==",
    "user": {
      "login": "sokra",
      "id": 1365881,
      "node_id": "MDQ6VXNlcjEzNjU4ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1365881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sokra",
      "html_url": "https://github.com/sokra",
      "followers_url": "https://api.github.com/users/sokra/followers",
      "following_url": "https://api.github.com/users/sokra/following{/other_user}",
      "gists_url": "https://api.github.com/users/sokra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sokra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sokra/subscriptions",
      "organizations_url": "https://api.github.com/users/sokra/orgs",
      "repos_url": "https://api.github.com/users/sokra/repos",
      "events_url": "https://api.github.com/users/sokra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sokra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T09:26:45Z",
    "updated_at": "2018-11-19T09:26:45Z",
    "author_association": "NONE",
    "body": "``` js\r\nconst useCallback = (fn, args) => {\r\n  const callback = useMemo(() => {\r\n    if (__DEV__) {\r\n      if (fn.length !== args.length) warning(...);\r\n    }\r\n    const callback = () => fn(...callback.args);\r\n    return callback;\r\n  });\r\n  useEffect(() => callback.args = args, [args]);\r\n  return callback;\r\n}\r\n```\r\n\r\nDrawbacks:\r\n\r\nIt's easy to forget the arguments list, which would result in hard to find bugs. In dev mode it would make sense to check fn.length for the correct length.\r\n\r\nIt's still possible to forget arguments in the dependencies array, but this applies to other hooks too.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/439826037/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/439922530",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-439922530",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 439922530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzOTkyMjUzMA==",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T15:02:11Z",
    "updated_at": "2018-11-19T15:02:11Z",
    "author_association": "MEMBER",
    "body": "Yes, that's the approach from https://github.com/reactjs/rfcs/issues/83 and https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback. We don't want it to be default because it's easier to introduce bugs in concurrent mode this way.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/439922530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440013892",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440013892",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440013892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDAxMzg5Mg==",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-19T19:30:53Z",
    "updated_at": "2018-11-19T19:30:53Z",
    "author_association": "COLLABORATOR",
    "body": "@sokra An alternate would be:\r\n\r\n```js\r\nfunction useEventCallback(fn) {\r\n  let ref = useRef();\r\n  useLayoutEffect(() => {\r\n    ref.current = fn;\r\n  });\r\n  return useCallback(() => (0, ref.current)(), []);\r\n}\r\n```\r\n\r\nThis doesn't require the args like yours has. But again, you can't call this in the render phase and the use of mutation is dicey for concurrent.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440013892/reactions",
      "total_count": 57,
      "+1": 50,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 7,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440172008",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440172008",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440172008,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDE3MjAwOA==",
    "user": {
      "login": "sokra",
      "id": 1365881,
      "node_id": "MDQ6VXNlcjEzNjU4ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1365881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sokra",
      "html_url": "https://github.com/sokra",
      "followers_url": "https://api.github.com/users/sokra/followers",
      "following_url": "https://api.github.com/users/sokra/following{/other_user}",
      "gists_url": "https://api.github.com/users/sokra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sokra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sokra/subscriptions",
      "organizations_url": "https://api.github.com/users/sokra/orgs",
      "repos_url": "https://api.github.com/users/sokra/repos",
      "events_url": "https://api.github.com/users/sokra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sokra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T07:31:09Z",
    "updated_at": "2018-11-20T07:31:23Z",
    "author_association": "NONE",
    "body": "@sophiebits That's clever and would have none of the problems with args, etc. It even doesn't require a dependencies list.\r\n\r\nOne nitpick: `return useCallback((...args) => (0, ref.current)(...args), []);` to pass along i. e. `event` argument.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440172008/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440177160",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440177160",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440177160,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDE3NzE2MA==",
    "user": {
      "login": "strayiker",
      "id": 6754588,
      "node_id": "MDQ6VXNlcjY3NTQ1ODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6754588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/strayiker",
      "html_url": "https://github.com/strayiker",
      "followers_url": "https://api.github.com/users/strayiker/followers",
      "following_url": "https://api.github.com/users/strayiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/strayiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/strayiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/strayiker/subscriptions",
      "organizations_url": "https://api.github.com/users/strayiker/orgs",
      "repos_url": "https://api.github.com/users/strayiker/repos",
      "events_url": "https://api.github.com/users/strayiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/strayiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T07:54:25Z",
    "updated_at": "2018-11-20T08:01:10Z",
    "author_association": "NONE",
    "body": "@sokra With this you will not be able to access to state and props updates inside a callback.\r\n```javascript\r\nconst [state, setState] = useState(0);\r\n\r\nconst handleClick = useCallback((event) => {\r\n  console.log(state); // always 0\r\n  setState(s => s + 1);\r\n});\r\n\r\nreturn <button onClick={handleClick} />\r\n```\r\nSo dependencies are required.\r\n\r\n```javascript\r\nfunction useCallback(fn, deps) {\r\n  const fnRef = useRef(fn);\r\n  const depsRef = useRef(deps);\r\n\r\n  useLayoutEffect(() => {\r\n    fnRef.current = fn;\r\n    depsRef.current = deps;\r\n  });\r\n\r\n  return useCallback((...args) => (0, ref.current)(...depsRef.current)(...args), []);\r\n}\r\n```\r\n\r\n```javascript\r\ncons handleClick = useCallback(\r\n  (state) => event => console.log(state), // up-to-date\r\n  [state]\r\n);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440177160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440187797",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440187797",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440187797,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDE4Nzc5Nw==",
    "user": {
      "login": "sokra",
      "id": 1365881,
      "node_id": "MDQ6VXNlcjEzNjU4ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1365881?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sokra",
      "html_url": "https://github.com/sokra",
      "followers_url": "https://api.github.com/users/sokra/followers",
      "following_url": "https://api.github.com/users/sokra/following{/other_user}",
      "gists_url": "https://api.github.com/users/sokra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sokra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sokra/subscriptions",
      "organizations_url": "https://api.github.com/users/sokra/orgs",
      "repos_url": "https://api.github.com/users/sokra/repos",
      "events_url": "https://api.github.com/users/sokra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sokra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-20T08:36:12Z",
    "updated_at": "2018-11-20T08:36:12Z",
    "author_association": "NONE",
    "body": "> @sokra With this you will not be able to access to state and props updates inside a callback.\r\n\r\nI think with @sophiebits' approach this will work. The latest function is always copied into the ref and only a trampoline function is returned. This will make sure that the latest function is called, which has the latest state in context.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440187797/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440717985",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440717985",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440717985,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDcxNzk4NQ==",
    "user": {
      "login": "muqg",
      "id": 21229458,
      "node_id": "MDQ6VXNlcjIxMjI5NDU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/21229458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muqg",
      "html_url": "https://github.com/muqg",
      "followers_url": "https://api.github.com/users/muqg/followers",
      "following_url": "https://api.github.com/users/muqg/following{/other_user}",
      "gists_url": "https://api.github.com/users/muqg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muqg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muqg/subscriptions",
      "organizations_url": "https://api.github.com/users/muqg/orgs",
      "repos_url": "https://api.github.com/users/muqg/repos",
      "events_url": "https://api.github.com/users/muqg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muqg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T15:59:34Z",
    "updated_at": "2018-11-21T16:04:29Z",
    "author_association": "NONE",
    "body": "I recently made a duplicate issue and was asked to check this one. What I proposed there was very similar to @sophiebits' approach, but still looks a bit simpler to me:\r\n\r\n```JavaScript\r\nfunction useStatic(cb) {\r\n  const callback = useRef(cb)\r\n  callback.current = cb\r\n\r\n  const mem = useRef((...args) => callback.current(...args))\r\n  return mem.current\r\n  \r\n  // We could, of course still, use the useCallback hook instead of a second reference.\r\n  // return useCallback((...args) => callback.current(...args), [])\r\n  // Although I think that the one above is better since it avoids the need to compare anything at all.\r\n}\r\n```\r\n\r\nThis way it is guaranteed to update where the hook is called since it does not directly use any side effect and instead it only updates a reference. It seems to me that it should be callable during the render phase and should not be dicey with concurrent mode (unless references don't meet these two conditions). Wouldn't this approach be a little better or am I missing something?",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440717985/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440794435",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440794435",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440794435,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDc5NDQzNQ==",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T20:09:03Z",
    "updated_at": "2018-11-21T20:09:03Z",
    "author_association": "MEMBER",
    "body": "@muqg In concurrent mode, last render doesn't necessarily mean \"latest committed state\". So a low-priority render with new props or state would overwrite a reference used by current event handler.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440794435/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440853271",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440853271",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440853271,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDg1MzI3MQ==",
    "user": {
      "login": "strayiker",
      "id": 6754588,
      "node_id": "MDQ6VXNlcjY3NTQ1ODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6754588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/strayiker",
      "html_url": "https://github.com/strayiker",
      "followers_url": "https://api.github.com/users/strayiker/followers",
      "following_url": "https://api.github.com/users/strayiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/strayiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/strayiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/strayiker/subscriptions",
      "organizations_url": "https://api.github.com/users/strayiker/orgs",
      "repos_url": "https://api.github.com/users/strayiker/repos",
      "events_url": "https://api.github.com/users/strayiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/strayiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-21T23:53:21Z",
    "updated_at": "2018-11-23T14:41:47Z",
    "author_association": "NONE",
    "body": "If I understand the problem correctly...\r\n\r\nWhat if useCallback will return a special callable object with two different states of an our callback function? The first is a `current` callback, that will changes on each render. The second is a `commited` callback, that changes within a commit phase.\r\nBy default call to that object will trigger the `current` value, so it can be used in render phase. \r\nBut internally, React will pass the `commited` value to the dom, which prevents the callback from being modified until the next commit.\r\n\r\n```javascript\r\nfunction Callback(cb) {\r\n  function callback(...args) {\r\n    return callback.current(...args);\r\n  }\r\n\r\n  callback.commited = cb;\r\n  callback.current = cb;\r\n  callback.SPECIAL_MARKER_FOR_REACT = true;\r\n\r\n  return callback;\r\n}\r\n\r\nfunction useCallback(cb) {\r\n  const callback = useMemo(() => new Callback(cb), []);\r\n\r\n  callback.current = cb;\r\n  \r\n  useLayoutEffect(() => {\r\n    callback.commited = cb;\r\n  });\r\n\r\n  return callback;\r\n}\r\n```\r\n```javascript\r\nfunction Component(counter) {\r\n  const handler = useCallback(() => {\r\n    console.log(counter);\r\n  });\r\n\r\n  handler(); // call to handler.current\r\n\r\n  // pass handler.commited to the dom\r\n  return <button onClick={handler} />\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440853271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440898471",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440898471",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440898471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDg5ODQ3MQ==",
    "user": {
      "login": "Volune",
      "id": 767553,
      "node_id": "MDQ6VXNlcjc2NzU1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/767553?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Volune",
      "html_url": "https://github.com/Volune",
      "followers_url": "https://api.github.com/users/Volune/followers",
      "following_url": "https://api.github.com/users/Volune/following{/other_user}",
      "gists_url": "https://api.github.com/users/Volune/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Volune/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Volune/subscriptions",
      "organizations_url": "https://api.github.com/users/Volune/orgs",
      "repos_url": "https://api.github.com/users/Volune/repos",
      "events_url": "https://api.github.com/users/Volune/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Volune/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-22T03:00:46Z",
    "updated_at": "2018-11-22T03:00:46Z",
    "author_association": "NONE",
    "body": "I don't think there is a point in saving the \"current\", if you want to call it during rendering, just save it in advance out of the hook:\r\n```\r\nconst handler = () => {/* do something*/};\r\nconst callback = useCallback(handler);\r\n// I can call the current:\r\nhandler();\r\n```\r\n----\r\nI personally don't see any benefits of the current `useCallback` implementation over the proposed `useEventCallback`, will it become the new implementation?\r\nAlso, can it warn when the callback is called during render in development mode?",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440898471/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/440946678",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-440946678",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 440946678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0MDk0NjY3OA==",
    "user": {
      "login": "strayiker",
      "id": 6754588,
      "node_id": "MDQ6VXNlcjY3NTQ1ODg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6754588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/strayiker",
      "html_url": "https://github.com/strayiker",
      "followers_url": "https://api.github.com/users/strayiker/followers",
      "following_url": "https://api.github.com/users/strayiker/following{/other_user}",
      "gists_url": "https://api.github.com/users/strayiker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/strayiker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/strayiker/subscriptions",
      "organizations_url": "https://api.github.com/users/strayiker/orgs",
      "repos_url": "https://api.github.com/users/strayiker/repos",
      "events_url": "https://api.github.com/users/strayiker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/strayiker/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-22T08:12:02Z",
    "updated_at": "2018-11-22T11:03:39Z",
    "author_association": "NONE",
    "body": "Concurrent mode can produce two different representations of a component (the first one is that commited to the dom and the second one is that in memory). This representations should behaves accordingly with their props and state.\r\n\r\n`useEventCallback` by @sophiebits mutates `ref.current` after all dom mutations is completed, so the `current` (in-memory) component can't use the newest callback until the commit is done.\r\n\r\n@muqg proposal mutate the callback on each render, so the `commited` component will lose the reference to the `old` callback.\r\n\r\nThe point of my proposal in the passing a separated callback reference, that will changes in commit phase, to the dom, while the in-memory (not commited) representation of a component can use the latest version of that callback.\r\n\r\n```javascript\r\nconst handler = () => {/* do something*/};\r\nconst callback = useCallback(handler);\r\n```\r\nIn this case, you wont pass down the `handler` to other components because it always changes. You will pass the `callback`, but will face again the concurrent mode problem.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/440946678/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/447230163",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-447230163",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 447230163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NzIzMDE2Mw==",
    "user": {
      "login": "Voronar",
      "id": 6104636,
      "node_id": "MDQ6VXNlcjYxMDQ2MzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6104636?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Voronar",
      "html_url": "https://github.com/Voronar",
      "followers_url": "https://api.github.com/users/Voronar/followers",
      "following_url": "https://api.github.com/users/Voronar/following{/other_user}",
      "gists_url": "https://api.github.com/users/Voronar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Voronar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Voronar/subscriptions",
      "organizations_url": "https://api.github.com/users/Voronar/orgs",
      "repos_url": "https://api.github.com/users/Voronar/repos",
      "events_url": "https://api.github.com/users/Voronar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Voronar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-14T06:37:00Z",
    "updated_at": "2018-12-14T07:47:03Z",
    "author_association": "NONE",
    "body": "Hi.\r\nAccording to @sophiebits `useEventCallback` implementation why is it \r\nfunction uses `useLayoutEffect` and not `useEffect` for `ref` updating?\r\nAnd is it normal due to current limitations use `useEventCallback` for all internal regular functions with some logic (which wants be memoized for \r\nusing in expensive pure components tree or/and has closured variables from outer hook function) inside custom hook?",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/447230163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/450527953",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-450527953",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 450527953,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDUyNzk1Mw==",
    "user": {
      "login": "jonnyasmar",
      "id": 4197029,
      "node_id": "MDQ6VXNlcjQxOTcwMjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4197029?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonnyasmar",
      "html_url": "https://github.com/jonnyasmar",
      "followers_url": "https://api.github.com/users/jonnyasmar/followers",
      "following_url": "https://api.github.com/users/jonnyasmar/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonnyasmar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonnyasmar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonnyasmar/subscriptions",
      "organizations_url": "https://api.github.com/users/jonnyasmar/orgs",
      "repos_url": "https://api.github.com/users/jonnyasmar/repos",
      "events_url": "https://api.github.com/users/jonnyasmar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonnyasmar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-29T23:24:06Z",
    "updated_at": "2018-12-29T23:24:06Z",
    "author_association": "NONE",
    "body": "How/why is it that variables are dereferenced within `useEffect`?\r\n\r\nWhether or not the effect is called again based on changes to state/reducer/etc (`useEffect`'s second param), shouldn't have any implication on those variable's references within `useEffect`, right?\r\n\r\nThis behavior seems unexpected and having to leverage \"escape hatches\" just feels broken to me.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/450527953/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451655339",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451655339",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451655339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY1NTMzOQ==",
    "user": {
      "login": "Bazzer588",
      "id": 40038437,
      "node_id": "MDQ6VXNlcjQwMDM4NDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40038437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bazzer588",
      "html_url": "https://github.com/Bazzer588",
      "followers_url": "https://api.github.com/users/Bazzer588/followers",
      "following_url": "https://api.github.com/users/Bazzer588/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bazzer588/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bazzer588/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bazzer588/subscriptions",
      "organizations_url": "https://api.github.com/users/Bazzer588/orgs",
      "repos_url": "https://api.github.com/users/Bazzer588/repos",
      "events_url": "https://api.github.com/users/Bazzer588/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bazzer588/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T13:28:48Z",
    "updated_at": "2019-01-05T13:28:48Z",
    "author_association": "NONE",
    "body": "I have a problem with converting this kind of thing to use functional components and the useCallback hook...\r\n\r\n```\r\nexport class TestForm extends React.Component {\r\n\r\n    onChangeField = (name,value) => {\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    render () {\r\n        const state = this.state;\r\n        return (\r\n            <>\r\n                <PickField name=\"gender\"      value={state.gender}      onChangeField={this.onChangeField} />\r\n                <TextField name=\"firstName\"   value={state.firstName}   onChangeField={this.onChangeField} />\r\n                <TextField name=\"lastName\"    value={state.lastName}    onChangeField={this.onChangeField} />\r\n                <DateField name=\"dateOfBirth\" value={state.dateOfBirth} onChangeField={this.onChangeField} />\r\n            </>\r\n        );\r\n    }\r\n```\r\n\r\nThe PickField, TextField and DateField components can be implemented with React.PureComponent or React.memo(...). Basically they just display an input field and a label - they have their own onChange handler which calls the onChangeField prop passed in. **They only redraw if their specific value changes**\r\n\r\n_onChangeField_ as above works just fine - but if I try this using a functional component for TestForm and _useCallback_ for onChangeField I just can't get it to 'not' redraw everything on a single field change\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451655339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451697211",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451697211",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451697211,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY5NzIxMQ==",
    "user": {
      "login": "jonnyasmar",
      "id": 4197029,
      "node_id": "MDQ6VXNlcjQxOTcwMjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4197029?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonnyasmar",
      "html_url": "https://github.com/jonnyasmar",
      "followers_url": "https://api.github.com/users/jonnyasmar/followers",
      "following_url": "https://api.github.com/users/jonnyasmar/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonnyasmar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonnyasmar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonnyasmar/subscriptions",
      "organizations_url": "https://api.github.com/users/jonnyasmar/orgs",
      "repos_url": "https://api.github.com/users/jonnyasmar/repos",
      "events_url": "https://api.github.com/users/jonnyasmar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonnyasmar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T22:33:00Z",
    "updated_at": "2019-01-05T22:33:00Z",
    "author_association": "NONE",
    "body": "@Bazzer588 Are you using React.memo on your functional component? What do your attempts using hooks/functional look like? Your problem may or may not be related to this issue; it's hard to tell without seeing your code.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451697211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451765812",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451765812",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451765812,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc2NTgxMg==",
    "user": {
      "login": "Bazzer588",
      "id": 40038437,
      "node_id": "MDQ6VXNlcjQwMDM4NDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40038437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bazzer588",
      "html_url": "https://github.com/Bazzer588",
      "followers_url": "https://api.github.com/users/Bazzer588/followers",
      "following_url": "https://api.github.com/users/Bazzer588/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bazzer588/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bazzer588/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bazzer588/subscriptions",
      "organizations_url": "https://api.github.com/users/Bazzer588/orgs",
      "repos_url": "https://api.github.com/users/Bazzer588/repos",
      "events_url": "https://api.github.com/users/Bazzer588/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bazzer588/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T19:04:26Z",
    "updated_at": "2019-01-06T19:07:55Z",
    "author_association": "NONE",
    "body": "Here's the full code - just drop a `<TestForm/>` or a `<HookTestForm/>` somewhere on a page\r\n\r\nUsing a React.Component, only the field being editted does a full render\r\n\r\n```\r\nimport React from 'react';\r\nimport TextField from \"./TextField\";\r\n\r\nexport default class TestForm extends React.Component {\r\n\r\n    onChangeField = (name,value) => {\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    render () {\r\n        const state = this.state || {};\r\n        return (\r\n            <>\r\n                <TextField name=\"gender\"      value={state.gender}      onChangeField={this.onChangeField} />\r\n                <TextField name=\"firstName\"   value={state.firstName}   onChangeField={this.onChangeField} />\r\n                <TextField name=\"lastName\"    value={state.lastName}    onChangeField={this.onChangeField} />\r\n                <TextField name=\"dateOfBirth\" value={state.dateOfBirth} onChangeField={this.onChangeField} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nUsing Hooks, all the child elements are re-rendered every time - presumably as onChangeField changes every time the state data changes. Is there some way I can implement onChangeField so it behaves like the above example?\r\n\r\n```\r\nimport React, {useState, useCallback} from 'react';\r\nimport TextField from \"./TextField\";\r\n\r\nexport default React.memo( () => {\r\n\r\n    const [data, changeData] = useState({});\r\n\r\n    const onChangeField = useCallback((name,value) => {\r\n        changeData({ ...data, [name]: value });\r\n    }, [data] );\r\n\r\n    return (\r\n        <>\r\n            <TextField name=\"gender\"      value={data.gender}      onChangeField={onChangeField} />\r\n            <TextField name=\"firstName\"   value={data.firstName}   onChangeField={onChangeField} />\r\n            <TextField name=\"lastName\"    value={data.lastName}    onChangeField={onChangeField} />\r\n            <TextField name=\"dateOfBirth\" value={data.dateOfBirth} onChangeField={onChangeField} />\r\n        </>\r\n    );\r\n});\r\n```\r\n\r\nThis is my `<TextField>` component - you can see when it does a full render from the console or with the React dev tools\r\n\r\n```\r\nimport React from 'react';\r\n\r\nexport default React.memo( ({ name, value, onChangeField }) => {\r\n\r\n    console.log('RENDER TEXT FIELD',name,value);\r\n\r\n    return (\r\n        <div className=\"form-field\">\r\n            <label htmlFor={name}>{name}</label>\r\n            <input\r\n                type=\"text\"\r\n                onChange={ (ev) => onChangeField( name, ev.target.value ) }\r\n                value={value || ''}\r\n            />\r\n        </div>\r\n    );\r\n});\r\n\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451765812/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451770188",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451770188",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451770188,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MDE4OA==",
    "user": {
      "login": "muqg",
      "id": 21229458,
      "node_id": "MDQ6VXNlcjIxMjI5NDU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/21229458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/muqg",
      "html_url": "https://github.com/muqg",
      "followers_url": "https://api.github.com/users/muqg/followers",
      "following_url": "https://api.github.com/users/muqg/following{/other_user}",
      "gists_url": "https://api.github.com/users/muqg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/muqg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/muqg/subscriptions",
      "organizations_url": "https://api.github.com/users/muqg/orgs",
      "repos_url": "https://api.github.com/users/muqg/repos",
      "events_url": "https://api.github.com/users/muqg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/muqg/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:03:18Z",
    "updated_at": "2019-01-06T20:03:18Z",
    "author_association": "NONE",
    "body": "@Bazzer588 I think its due to the object value kept in state under the variable name of `data`. I don't know why but objects in state always invalidate memoization and  thus your callback `onChangeField` is a new on on each render thus breaking the memoization of the components you're passing it to.\r\n\r\nI've had a similar issue like you and noticed this as being its cause. I have no idea why the object in state does not keep its reference when it has not been explicitly set to a new object.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451770188/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451771122",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451771122",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451771122,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MTEyMg==",
    "user": {
      "login": "Bazzer588",
      "id": 40038437,
      "node_id": "MDQ6VXNlcjQwMDM4NDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40038437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bazzer588",
      "html_url": "https://github.com/Bazzer588",
      "followers_url": "https://api.github.com/users/Bazzer588/followers",
      "following_url": "https://api.github.com/users/Bazzer588/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bazzer588/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bazzer588/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bazzer588/subscriptions",
      "organizations_url": "https://api.github.com/users/Bazzer588/orgs",
      "repos_url": "https://api.github.com/users/Bazzer588/repos",
      "events_url": "https://api.github.com/users/Bazzer588/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bazzer588/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:16:07Z",
    "updated_at": "2019-01-06T20:16:07Z",
    "author_association": "NONE",
    "body": "Yes my problem is that the in first example (using React.Component) I can create a _onChangeField_ callback which is bound to _this_, and never changes during renders\r\n\r\nUsing the new hook methods I can't seem to replicate the way the existing functionality works, \r\n\r\nOn the project I'm working on we often do this to have a hierachy of components and state:\r\n\r\n```\r\n    onChangeField = (fieldName,fieldValue) => {\r\n        const newValue = { ...this.props.value, [fieldName]: fieldValue };\r\n        this.props.onChangeField( this.props.name, newValue );\r\n    };\r\n```\r\nSo it passes props down the tree (ie value {})\r\nAnd uses the callback to send new values up the tree\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451771122/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451771878",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451771878",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451771878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MTg3OA==",
    "user": {
      "login": "dantman",
      "id": 53399,
      "node_id": "MDQ6VXNlcjUzMzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/53399?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dantman",
      "html_url": "https://github.com/dantman",
      "followers_url": "https://api.github.com/users/dantman/followers",
      "following_url": "https://api.github.com/users/dantman/following{/other_user}",
      "gists_url": "https://api.github.com/users/dantman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dantman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dantman/subscriptions",
      "organizations_url": "https://api.github.com/users/dantman/orgs",
      "repos_url": "https://api.github.com/users/dantman/repos",
      "events_url": "https://api.github.com/users/dantman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dantman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:26:15Z",
    "updated_at": "2019-01-06T20:26:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Using the new hook methods I can't seem to replicate the way the existing functionality works,\r\n\r\nUse `useReducer`.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451771878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451772519",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451772519",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451772519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3MjUxOQ==",
    "user": {
      "login": "jonnyasmar",
      "id": 4197029,
      "node_id": "MDQ6VXNlcjQxOTcwMjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4197029?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonnyasmar",
      "html_url": "https://github.com/jonnyasmar",
      "followers_url": "https://api.github.com/users/jonnyasmar/followers",
      "following_url": "https://api.github.com/users/jonnyasmar/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonnyasmar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonnyasmar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonnyasmar/subscriptions",
      "organizations_url": "https://api.github.com/users/jonnyasmar/orgs",
      "repos_url": "https://api.github.com/users/jonnyasmar/repos",
      "events_url": "https://api.github.com/users/jonnyasmar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonnyasmar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:35:12Z",
    "updated_at": "2019-01-06T20:35:12Z",
    "author_association": "NONE",
    "body": "@Bazzer588 The data var your passing to the second parameter of useCallback is going to invalidate every time. useCallback doesn't do a deep comparison. You need to pass in a flat array for it to properly memoize.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451772519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451774117",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451774117",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451774117,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3NDExNw==",
    "user": {
      "login": "Bazzer588",
      "id": 40038437,
      "node_id": "MDQ6VXNlcjQwMDM4NDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40038437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bazzer588",
      "html_url": "https://github.com/Bazzer588",
      "followers_url": "https://api.github.com/users/Bazzer588/followers",
      "following_url": "https://api.github.com/users/Bazzer588/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bazzer588/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bazzer588/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bazzer588/subscriptions",
      "organizations_url": "https://api.github.com/users/Bazzer588/orgs",
      "repos_url": "https://api.github.com/users/Bazzer588/repos",
      "events_url": "https://api.github.com/users/Bazzer588/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bazzer588/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T20:56:26Z",
    "updated_at": "2019-01-06T20:56:26Z",
    "author_association": "NONE",
    "body": "Yes I've tried similar with _useReducer_ and passing _dispatch_ down to the child components - this does seem to work as you get the same _dispatch_ method so it doesn't force a re-render\r\n\r\nIf there's no way to make callback functions work as they did before I guess that's the way we'll have to go\r\n\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451774117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451775592",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451775592",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451775592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3NTU5Mg==",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T21:16:03Z",
    "updated_at": "2019-01-06T21:16:03Z",
    "author_association": "COLLABORATOR",
    "body": "@Bazzer588 The general recommendation is to `useReducer`.\r\n\r\nThat said, your particular example can be solved like this but it is pretty unusual to not depend on any props so this doesn't always work:\r\n\r\n```js\r\n    const onChangeField = useCallback((name, value) => {\r\n        changeData(oldData => ({ ...oldData, [name]: value }));\r\n    }, []);\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451775592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/451777330",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-451777330",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 451777330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTc3NzMzMA==",
    "user": {
      "login": "Bazzer588",
      "id": 40038437,
      "node_id": "MDQ6VXNlcjQwMDM4NDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40038437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bazzer588",
      "html_url": "https://github.com/Bazzer588",
      "followers_url": "https://api.github.com/users/Bazzer588/followers",
      "following_url": "https://api.github.com/users/Bazzer588/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bazzer588/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bazzer588/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bazzer588/subscriptions",
      "organizations_url": "https://api.github.com/users/Bazzer588/orgs",
      "repos_url": "https://api.github.com/users/Bazzer588/repos",
      "events_url": "https://api.github.com/users/Bazzer588/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bazzer588/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-06T21:39:18Z",
    "updated_at": "2019-01-06T21:39:18Z",
    "author_association": "NONE",
    "body": "Thanks @sebmarkbage - didn't realise you could pass a function to changeData\r\n(As in `const [data, changeData] = useState({});` )\r\nHowever now I'm worried - in what case would this _doesn't always work_ ?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/451777330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/457861783",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-457861783",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 457861783,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg2MTc4Mw==",
    "user": {
      "login": "doasync",
      "id": 29141708,
      "node_id": "MDQ6VXNlcjI5MTQxNzA4",
      "avatar_url": "https://avatars.githubusercontent.com/u/29141708?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/doasync",
      "html_url": "https://github.com/doasync",
      "followers_url": "https://api.github.com/users/doasync/followers",
      "following_url": "https://api.github.com/users/doasync/following{/other_user}",
      "gists_url": "https://api.github.com/users/doasync/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/doasync/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/doasync/subscriptions",
      "organizations_url": "https://api.github.com/users/doasync/orgs",
      "repos_url": "https://api.github.com/users/doasync/repos",
      "events_url": "https://api.github.com/users/doasync/events{/privacy}",
      "received_events_url": "https://api.github.com/users/doasync/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T20:05:21Z",
    "updated_at": "2019-01-26T20:05:21Z",
    "author_association": "NONE",
    "body": "@gaearon, is this issue going to be solved before hooks release?",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/457861783/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/457866052",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-457866052",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 457866052,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg2NjA1Mg==",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-26T21:07:03Z",
    "updated_at": "2019-01-26T21:07:03Z",
    "author_association": "MEMBER",
    "body": "Workarounds above (especially relying more on `useReducer`) seem sufficient for most cases. There are cases when they’re not, but we’ll likely revisit this again in a few months.",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/457866052/reactions",
      "total_count": 6,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 5,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/457877042",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-457877042",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 457877042,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg3NzA0Mg==",
    "user": {
      "login": "Bazzer588",
      "id": 40038437,
      "node_id": "MDQ6VXNlcjQwMDM4NDM3",
      "avatar_url": "https://avatars.githubusercontent.com/u/40038437?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Bazzer588",
      "html_url": "https://github.com/Bazzer588",
      "followers_url": "https://api.github.com/users/Bazzer588/followers",
      "following_url": "https://api.github.com/users/Bazzer588/following{/other_user}",
      "gists_url": "https://api.github.com/users/Bazzer588/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Bazzer588/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Bazzer588/subscriptions",
      "organizations_url": "https://api.github.com/users/Bazzer588/orgs",
      "repos_url": "https://api.github.com/users/Bazzer588/repos",
      "events_url": "https://api.github.com/users/Bazzer588/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Bazzer588/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T00:05:10Z",
    "updated_at": "2019-01-27T00:05:10Z",
    "author_association": "NONE",
    "body": "It's very, very different behaviour\r\n\r\nWith a ES6 class I can pass _onChange={this.handleChange}_ to the child component and it does not redraw every time (because it sends the same _handleChange_ method every time)\r\n\r\nIt's frustrating that _dispatch_ works independent of state (I mean the _dispatch_ method does not change even if the underlying state does) but useCallback does not (if your callback needs to do something with state that is)\r\n\r\nI see a lot of code where the whole form redraws when the use types into a field\r\n\r\nA lot of devs don't understand this until users complain 'it's slow'",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/457877042/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/comments/457880537",
    "html_url": "https://github.com/facebook/react/issues/14099#issuecomment-457880537",
    "issue_url": "https://api.github.com/repos/facebook/react/issues/14099",
    "id": 457880537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1Nzg4MDUzNw==",
    "user": {
      "login": "carlosagsmendes",
      "id": 1224078,
      "node_id": "MDQ6VXNlcjEyMjQwNzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1224078?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/carlosagsmendes",
      "html_url": "https://github.com/carlosagsmendes",
      "followers_url": "https://api.github.com/users/carlosagsmendes/followers",
      "following_url": "https://api.github.com/users/carlosagsmendes/following{/other_user}",
      "gists_url": "https://api.github.com/users/carlosagsmendes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/carlosagsmendes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carlosagsmendes/subscriptions",
      "organizations_url": "https://api.github.com/users/carlosagsmendes/orgs",
      "repos_url": "https://api.github.com/users/carlosagsmendes/repos",
      "events_url": "https://api.github.com/users/carlosagsmendes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/carlosagsmendes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-27T01:21:35Z",
    "updated_at": "2019-01-27T01:21:35Z",
    "author_association": "NONE",
    "body": "> @Bazzer588 The general recommendation is to `useReducer`.\r\n> \r\n> That said, your particular example can be solved like this but it is pretty unusual to not depend on any props so this doesn't always work:\r\n> \r\n> ```js\r\n>     const onChangeField = useCallback((name, value) => {\r\n>         changeData(oldData => ({ ...oldData, [name]: value }));\r\n>     }, []);\r\n> ```\r\n\r\n@sebmarkbage I tried the approach above of using the `oldData` argument, but it didn't help me to avoid re-renders of the children components (that's why I was using useCallback)\r\n\r\nSo I [tried using useReducer and use dispatch inside the useCallback](https://codesandbox.io/s/8zmyo11m72) but all the children are still re-rendering. \r\n\r\nMoreover, I'm passing the state to a callback after changing it, and it is always the previous state (off by one).\r\n\r\nCan someone [take a look](https://codesandbox.io/s/8zmyo11m72) and let me know what the recommended approach is?       \r\n\r\nThanks in advance!",
    "reactions": {
      "url": "https://api.github.com/repos/facebook/react/issues/comments/457880537/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
